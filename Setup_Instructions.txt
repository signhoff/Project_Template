Setting up a VN
1) new terminal

2) create a new virtual environment
	python -m venv venv

3) override VS Code safety
	Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process
Activate new environment 
	.\venv\Scripts\Activate.ps1

4) install TWS API
	python -m pip install --upgrade "C:\TWS API\source\pythonclient\dist\ibapi-10.30.1-py3-none-any.whl"

5) install necessary libraries 
	python -m pip install -r requirements.txt

6) Configure VS Code to Use the Project's Virtual Environment
	Ctrl+Shift+P
	Python: Select Interpreter
	projects venv folder -> .\venv\Scripts\python.exe


Github Instructions
Of course. It's an excellent idea to have a reference guide. Here is a set of instructions you can save for 
future use, covering both creating new projects and updating existing ones.

-----

=========================================
THIS MUST BE DONE IN WINDOWS POERSHELL
=========================================
## Your Personal Git & GitHub Workflow Guide

Here are the standard command-line steps for managing your projects with Git and GitHub.

### **Part 1: How to Upload a Brand New Project to GitHub**

  Step 1: CD into the Project Folder
    cd "C:\Users\17082\Documents\TWS_Projects\zzz_Duplicate_Finance_Projects\"

  Step 2: Initialize Git and Make Your First "Commit"
    # 1. git init
    # 2. git add .
    # 3. git commit -m "Initial commit"

  Step 3: Create the GitHub Repository and Push
    gh repo create
    ***answer any questions***

***First-Time Setup Note:** If you ever get an `Author identity unknown` error after the `git commit` command,
run these two commands one time to set up your identity, then try the `git commit` command again:***
  `git config --global user.name "YourGitHubUsername"`
  `git config --global user.email "your_email_for_github@example.com"`

### **Part 2: Push Updates to an Existing Project**

  Step 1: CD into Your Project Folder
      cd "C:\Users\17082\Documents\TWS_Projects\zzz_Duplicate_Finance_Projects\"

  Step 2: Check the Status of Your Changes**
    This is the most common command you'll use. It shows you which files you have modified, added, or deleted.
    Files in **red** are changes that have not yet been prepared ("staged") for the next commit.
      git status
    
  Step 3: Add Your Changes to the Staging Area
  You need to tell Git exactly which changes you want to include in the next update.

    # To add ALL changes you've made:
      git add .

    # OR, to add changes from a specific file only:
      git add path/to/your/file.py

After running `git add`, if you run `git status` again, you'll see the files have turned **green**. This means
they are "staged" and ready to be committed.

  Step 4: Commit Your Staged Changes
    Bundle your staged changes into a "commit" with a clear message describing what you did.
    Write a clear, descriptive message inside the quotes
      git commit -m "Add new feature for user profiles"

*Good commit messages are very helpful\! Examples: "Fix bug on the login page", "Update documentation for API",
"Add historical data for 2024".*

  Step 5: Push Your Commit to GitHub

This sends all of your new, committed changes from your local computer up to your GitHub repository.
  git push
  
git remote add origin https://github.com/signhoff/Project_Template.git
git branch -M main
git push -u origin main